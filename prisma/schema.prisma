generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" // Local SQLite database path
}

model UserSettings {
  userId   String @id
  currency String
  mode     String @default("Individual") // "Individual" or "Family"
}

model Family {
  familyId        String   @id @default(uuid())
  name      String
  createdBy String // userId of the creator
  createdAt DateTime @default(now())

  members FamilyMember[] // Relation to FamilyMember model
}

model FamilyMember {
  familyMemberId        String   @id @default(uuid()) // Primary key
  userId    String   // Foreign key to user
  familyId  String   // Foreign key to family
  role      String   // Roles like "Owner", "Admin", "Member"
  createdAt DateTime @default(now())

  family Family @relation(fields: [familyId], references: [familyId])

  @@index([userId])
  @@index([familyId])
}

model Category {
  createdAt DateTime @default(now())
  name      String
  userId    String
  familyMemberId  String?
  icon      String
  type      String   @default("income")

  @@unique([name, userId, type]) // Ensure unique per user/family and type
}

model Transaction {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  amount       Float
  description  String
  date         DateTime
  userId       String // Nullable when part of a family transaction
  familyMemberId     String? // Nullable when used for individual transactions
  type         String   @default("income")
  isIndividual Boolean  @default(true) // Indicates if it is an individual transaction

  category     String
  categoryIcon String

  @@index([userId, familyMemberId]) // Add an index to optimize querying based on user/family context
}

model MonthHistory {
  userId   String
  familyMemberId String?
  day      Int
  month    Int
  year     Int
  income   Float
  expense  Float

  @@id([userId, day, month, year]) // Composite primary key
}

model YearHistory {
  userId   String
  familyMemberId String?
  month    Int
  year     Int
  income   Float
  expense  Float

  @@id([userId, month, year]) // Composite primary key
}
